install.packages("rmarkdown")
library(swirl)
swirl()
swirl()
install_course("Getting_and_Cleaning_Data")
swirl()
swirl()
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files("testdir")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.remane("mytest.R","mytest2.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
?file.path
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"))
dir.create(file.path("testdir2","testdir3",recursive=TRUE))
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
setwd("old.dir")
setwd(old.dir)
file.remove("testdir")
install.packages("UsingR")
library(manipulate)
install.packages("manipulate")
library(manipulate)
myHist <- function(mu){
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x = child)) + geom_histogram(fill = "salmon", colour = "black", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
library(ggplot2)
install.packages("ggplot2")
library(UsingR); data(galton); library(reshape); long <- melt(galton)
g <- ggplot(long, aes(x = value, fill = variable))
g <- g + geom_histogram(colour = "black", binwidth=1)
g <- g + facet_grid(. ~ variable)
g
library(ggplot2)
```{r setup, cache = F, echo = F, message = F, warning = F, tidy = F, results='hide'}
install.packages("UsingR")
```{r galton,fig.height=3.5,fig.width=8}
library(UsingR); data(galton); library(reshape); long <- melt(galton)
install.packages("ggplot2")
library(ggplot2)
library(UsingR); data(galton); library(reshape); long <- melt(galton)
?mfrow
?par
par(mfrow(2))
install.packages(c("backports", "BH", "DBI", "dplyr", "evaluate", "jsonlite", "knitr", "PKI", "R6", "Rcpp", "rlang", "rmarkdown", "rsconnect", "rstudioapi", "scales", "tibble"))
install.packages("caret")
setwd("~/Coursera/Machine_Learning/Project1")
knitr::opts_chunk$set(echo = TRUE)
# initail setup items
library(caret)
setwd("~/Coursera/Machine_Learning/Project1")
training <- read.csv("pml-training.csv")
head(training)
str(training)
str(training, 100:160)
tail(str(training),10)
testing <- read.csv("pml-testing.csv")
head(training,1)
part1 <- createDataPartition(training$classe, p=0.75, list=F)
14718/19622
train.set <- training[,-c(1:7)]
test.set <- testing[,c(1:7)]
test.set <- testing[,-c(1:7)]
head(train.set)
str(train.set)
summary(train.set)
?complete.cases
summary(test.set)
srd <= test.set[complete.cases(test.set),]
srd = test.set[complete.cases(test.set),]
srd = test.set[is.na(test.set$kurtosis_roll_dumbbell),]
srd
srd = testing[is.na(test.set$kurtosis_roll_dumbbell),]
srd
summary(srd$new_window)
?na.strings
?read.csv
training <- read.csv("pml-training.csv", na.strings=c("NA","#DIV/0!",""))
testing <- read.csv("pml-testing.csv",na.strings=c("NA","#DIV/0!",""))
summary(testing)
summary(training)
sum(training$kurtosis_roll_dumbbell)
srd1 = is.na(training)
summarysrd1
summary(srd1)
complete.training <- training[, colSums(is.na(training)) != nrow(training)]
summary(complete.training)
complete.training <- complete.training[,-(which(colSums(complete.training) == 0))]
str(complete.training)
complete.training <- training[, colSums(is.na(training)) != nrow(training)]
str(complete.training)
summary(complete.training)
str(complete.training)
complete.training2 <- training[, -(c("amplitude_yaw_belt", "amplitude_yaw_dumbbell",
"amplitude_yaw_forearm"))]
complete.training2 <- training[, -c("amplitude_yaw_belt", "amplitude_yaw_dumbbell",
"amplitude_yaw_forearm")]
complete.training2 <- training[, -c(amplitude_yaw_belt, amplitude_yaw_dumbbell,
amplitude_yaw_forearm)]
complete.training2 <- subset(complete.training, select = -c(amplitude_yaw_belt, amplitude_yaw_dumbbell,amplitude_yaw_forearm))
complete.training2 <- subset(complete.training, select = -c(amplitude_yaw_belt,                              amplitude_yaw_dumbbell,amplitude_yaw_forearm))
train.set <- complete.training2[,-c(1:7)]
testing <- read.csv("pml-testing.csv",na.strings=c("NA","#DIV/0!",""))
complete.testing <- training[, colSums(is.na(training)) != nrow(training)]
complete.testing2 <- subset(complete.testing, select = -c(amplitude_yaw_belt,                              amplitude_yaw_dumbbell,amplitude_yaw_forearm))
complete.testing <- testing[, colSums(is.na(testing)) != nrow(testing)]
testing <- read.csv("pml-testing.csv",na.strings=c("NA","#DIV/0!",""))
complete.testing <- testing[, colSums(is.na(testing)) != nrow(testing)]
complete.testing2 <- subset(complete.testing, select = -c(amplitude_yaw_belt,                              amplitude_yaw_dumbbell,amplitude_yaw_forearm))
testing <- read.csv("pml-testing.csv",na.strings=c("NA","#DIV/0!",""))
summary(testing)
complete.testing <- testing[, colSums(is.na(testing)) != nrow(testing)]
summary(complete.testing)
complete.testing$problem_id
str(complete.testing$problem_id)
test.final <- complete.testing[,-c(1:7,60)]
test.final
names(test.final)
to.include <- names(test.final)
train.match <- complete.training[,c(to.include, classe)]
train.match <- subset(complete.training, select= c(to.include, classe))
train.match <- subset(complete.training, select= c(to.include, "classe"))
train.final <- subset(complete.training, select= c(to.include, "classe"))
names(train.final)
part1 <- createDataPartition(train.final$classe, p=0.75, list=F)
inTrain <- training[part1,]
inValidation <- training[-part1,]
inTrain <- train.final[part1,]
inValidation <- train.final[-part1,]
14718/19622
fit1 <- train(classe ~ .,data=inTrain, model="glm")
install.packages("e1071")
library("e1071", lib.loc="~/R/win-library/3.4")
fit1 <- train(classe ~ .,data=inTrain, model="glm")
